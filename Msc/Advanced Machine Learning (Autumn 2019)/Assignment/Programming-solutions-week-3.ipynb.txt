{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Programming Exercise 3.2: Regression\n",
    "\n",
    "\n",
    "The file bodyfat.txt contains a data set with measurements of body fat percentage, age, weight, height, and ten body circumference measurements for 252 men. The columns are: 1) Density, 2) %Fat, 3) Age, 4) Weight, 5) Height, 6) Neck, 7) Chest, 8) Abdom, 9) Hip, 10) Thigh, 11) Knee, 12) Ankle, 13) Biceps, 14) F-arm, 15) Wrist. By using the mathematical tools learnt in the lecture, in the following make a multivariate linear model to predict the body fat percentage from the remaining ob- servations.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#file_path = \"../../data/\"\n",
    "file_name = \"bodyfat.txt\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_data(file_name):\n",
    "    \"\"\"\n",
    "    Reads the txt file and returns it as a pandas dataframe.\n",
    "    First line in the file is expected to be the column names\n",
    "    \"\"\"\n",
    "    with open(file_name) as f:\n",
    "        text = f.readlines()\n",
    "    data = [None]*len(text)\n",
    "    for i in range(len(data)):\n",
    "        if i == 0:\n",
    "            data[i] = text[i].split()\n",
    "        else:\n",
    "            data_list = []\n",
    "            for element in text[i].split():\n",
    "                if \".\" in element:\n",
    "                    data_list.append(float(element))\n",
    "                else:\n",
    "                    data_list.append(int(element))\n",
    "            data[i] = data_list    \n",
    "    df = pd.DataFrame(data[1:],columns=data[0])\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: 'men.'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-0d181cda931a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mread_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-3-0be4bdbccbfd>\u001b[0m in \u001b[0;36mread_data\u001b[0;34m(file_name)\u001b[0m\n\u001b[1;32m     14\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0melement\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtext\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\".\"\u001b[0m \u001b[0;32min\u001b[0m \u001b[0melement\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m                     \u001b[0mdata_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0melement\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m                     \u001b[0mdata_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0melement\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'men.'"
     ]
    }
   ],
   "source": [
    "df = read_data(file_name)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (a)\n",
    "Estimate a 1D regression model from the data to predict the factor fat (column 2), using the variable Abdomen (column 8). (This conforms to the first programming exercise.) Report the estimated parameters.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Phi(X):\n",
    "    \"\"\"\n",
    "    This function creates D matrix on p.80 in class book.\n",
    "    \n",
    "    However this matrix is often refered to as Phi, and is created \n",
    "    with a simple basis function\n",
    "    \"\"\"\n",
    "    \n",
    "    Phi = np.ones( (X.shape[0],X.shape[1] + 1) )\n",
    "    Phi[:,1:] = X\n",
    "    return Phi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_w(X,r):\n",
    "    \"\"\"\n",
    "    Calculates the weights\n",
    "    \"\"\"\n",
    "    D = Phi(X)\n",
    "    inv_elm = np.linalg.inv(np.dot(D.T,D))\n",
    "    w = np.dot( np.dot(inv_elm,D.T), r)\n",
    "    return w"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-39.28018466,   0.63130438])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calc_w(df[[\"Abdom\"]], df[\"%Fat\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (b) \n",
    "Divide the data set to independent training (90%) and test sets (10%). Use the variable Abdomen (eight column) (M1) and the columns 3 to 15 (M2) to predict fat. Report the estimated parameters and the RMSE on training and test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_data(X,y, test_size = 0.1, random_state = 101):\n",
    "    \"\"\"\n",
    "    This fucntion split a dataframe and returns X_train, X_test, y_train, y_test\n",
    "    given by the y_col and X_col parameters\n",
    "    \"\"\"\n",
    "    assert len(X) == len(y)\n",
    "    N = len(y)\n",
    "    \n",
    "    np.random.seed( random_state )\n",
    "    random_idx = np.random.permutation( N )\n",
    "    \n",
    "    train_idx = random_idx[ int(N * test_size) :]\n",
    "    test_idx = random_idx[: int(N * test_size) ]\n",
    "    \n",
    "    X_train = X.iloc[train_idx]\n",
    "    X_test = X.iloc[test_idx]\n",
    "    y_train = y[train_idx]\n",
    "    y_test = y[test_idx]\n",
    "    \n",
    "    return X_train, X_test, y_train, y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fit_model(X_train, y_train):\n",
    "    \"\"\"\n",
    "    Finds an returns the weights for a linear regression model\n",
    "    \"\"\"\n",
    "    assert len(X_train) == len(y_train)\n",
    "    w = calc_w(X_train, y_train)\n",
    "    return w\n",
    "\n",
    "\n",
    "def predict(w, X_test):\n",
    "    \"\"\"\n",
    "    This function predicts based on the weights and the X\n",
    "    \"\"\"\n",
    "    X_test_Phi = Phi(X_test)\n",
    "    result = np.dot(X_test_Phi, w.T)\n",
    "    return result\n",
    "\n",
    "\n",
    "def RMSE(y,r):\n",
    "    \"\"\"\n",
    "    This function calculates the root mean squared error based on the true values y and the predicted result r\n",
    "    \"\"\"\n",
    "    assert len(y) == len(r)\n",
    "    sqrt_diff = (sum(r-y))**2\n",
    "    mse = sqrt_diff/len(y)\n",
    "    result = math.sqrt(mse)\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The RMSE on the training set is: 0.0000\n",
      "The RMSE on the test set is: 0.0901\n",
      "\n",
      "With the following weights: [-39.82365053   0.63719544]\n"
     ]
    }
   ],
   "source": [
    "# Model 1\n",
    "\n",
    "cols = df.columns\n",
    "train_cols = [\"Abdom\"]\n",
    "y_col = \"%Fat\"\n",
    "X_train, X_test, y_train, y_test = split_data(df[train_cols], df[y_col])\n",
    "\n",
    "\n",
    "w = fit_model(X_train,y_train)\n",
    "result = predict(w, X_test)\n",
    "train_result = predict(w, X_train)\n",
    "rmse = RMSE(y_test,result)\n",
    "train_rmse = RMSE(y_train, train_result)\n",
    "\n",
    "print(\"The RMSE on the training set is: {:.04f}\".format(train_rmse))\n",
    "print(\"The RMSE on the test set is: {:.04f}\".format(rmse))\n",
    "print()\n",
    "print(\"With the following weights:\",w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The RMSE on the training set is: 0.0000\n",
      "The RMSE on the test set is: 4.6346\n",
      "\n",
      "With the following weights: \n",
      " [-17.11020716   0.04771707  -0.09215054  -0.06673822  -0.43485511\n",
      "  -0.053083     0.9920996   -0.22889799   0.2241006    0.15024454\n",
      "  -0.2353898    0.23294885   0.42264854  -1.3718511 ]\n"
     ]
    }
   ],
   "source": [
    "# Model 2\n",
    "\n",
    "cols = df.columns\n",
    "train_cols = [col for col in cols if col not in [\"%Fat\",\"Density\"]]\n",
    "y_col = \"%Fat\"\n",
    "X_train, X_test, y_train, y_test = split_data(df[train_cols], df[y_col])\n",
    "\n",
    "\n",
    "w = fit_model(X_train,y_train)\n",
    "result = predict(w, X_test)\n",
    "train_result = predict(w, X_train)\n",
    "rmse = RMSE(y_test,result)\n",
    "train_rmse = RMSE(y_train, train_result)\n",
    "print(\"The RMSE on the training set is: {:.04f}\".format(train_rmse))\n",
    "print(\"The RMSE on the test set is: {:.04f}\".format(rmse))\n",
    "print()\n",
    "print(\"With the following weights: \\n\",w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The RMSE on the training set is: 0.0000\n",
      "The RMSE on the test set is: 0.3455\n",
      "\n",
      "With the following weights: \n",
      " [ 4.45392090e+02 -4.09046147e+02  6.42437207e-02 -2.32439694e-03]\n"
     ]
    }
   ],
   "source": [
    "# Model 3\n",
    "cols = df.columns\n",
    "train_cols = [\"Density\",\"Abdom\",\"Weight\"]\n",
    "y_col = \"%Fat\"\n",
    "X_train, X_test, y_train, y_test = split_data(df[train_cols], df[y_col])\n",
    "\n",
    "w = fit_model(X_train,y_train)\n",
    "result = predict(w, X_test)\n",
    "train_result = predict(w, X_train)\n",
    "rmse = RMSE(y_test,result)\n",
    "train_rmse = RMSE(y_train, train_result)\n",
    "print(\"The RMSE on the training set is: {:.04f}\".format(train_rmse))\n",
    "print(\"The RMSE on the test set is: {:.04f}\".format(rmse))\n",
    "print()\n",
    "print(\"With the following weights: \\n\",w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The RMSE on the training set is: 0.0000\n",
      "The RMSE on the test set is: 0.6896\n",
      "\n",
      "With the following weights: \n",
      " [ 4.47552860e+02 -4.11209299e+02  1.37276701e-02  7.41234551e-03\n",
      " -2.12698593e-03 -1.65763449e-02  4.27372863e-02  8.27459382e-03\n",
      "  2.45253939e-02 -3.18801719e-05  1.71376059e-03 -1.42869702e-01\n",
      " -7.73976608e-02  5.55019508e-02  6.03920610e-02]\n"
     ]
    }
   ],
   "source": [
    "cols = df.columns\n",
    "train_cols = [col for col in cols if col not in [\"%Fat\"]]\n",
    "y_col = \"%Fat\"\n",
    "X_train, X_test, y_train, y_test = split_data(df[train_cols], df[y_col])\n",
    "\n",
    "w = fit_model(X_train,y_train)\n",
    "result = predict(w, X_test)\n",
    "train_result = predict(w, X_train)\n",
    "rmse = RMSE(y_test,result)\n",
    "train_rmse = RMSE(y_train, train_result)\n",
    "print(\"The RMSE on the training set is: {:.04f}\".format(train_rmse))\n",
    "print(\"The RMSE on the test set is: {:.04f}\".format(rmse))\n",
    "print()\n",
    "print(\"With the following weights: \\n\",w)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (c) \n",
    "Choose at least two criteria to compare the models and discuss the differences. For example: (R)MSE, number of parameters, . . .\n",
    "\n",
    "### Short answer\n",
    "The model is affected by which parameters i used, as well as the number. This can be seen in the RMSE. Also one can see on the weights which parameter the model prioritises the most."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Programming Exercise 3.3: PCA\n",
    "\n",
    "## (a)\n",
    "Compute a PCA for two dimension of the bodyfat data. Use columns 2 and 8, such that $X \\in R^{252×2}$, $N = 252$, $D = 2$. Reminder of how to compute the PCA:\n",
    "\n",
    "    (1) Compute mean \n",
    "$$m =\\frac{1}{N} \\sum^N_{n=1} x_n $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_m(X):\n",
    "    \"\"\"\n",
    "    Calculated thr mean of a matrix, or an array\n",
    "    \"\"\"\n",
    "    if len(X.shape) > 1:   \n",
    "        return np.mean(X,axis = 0)\n",
    "    else:\n",
    "        return np.mean(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    (2) Subtract mean from each sample, put them in new data matrix \n",
    "$$(x_n − m) =: \\hat{x}􏰖 \\in R^D ⇒ \\hat{X}􏰗 \\in R^{N ×D} $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def X_hat(X, m):\n",
    "    \"\"\"\n",
    "    Subracts the mean from en array or a matrix\n",
    "    \"\"\"\n",
    "    assert X.shape[1] == len(m)\n",
    "    return X-m"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    (3) Compute covariance matrix\n",
    "$$C = \\frac{1}{N}\\hat{X}^T\\hat{X} \\in R^{DxD}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def covar_matrix(X_hat):\n",
    "    \"\"\"\n",
    "    Calculates the covariance matrix\n",
    "    \"\"\"\n",
    "    N = len(X_hat[0])\n",
    "    C = np.dot( X_hat.T, X_hat ) \n",
    "    return np.dot( X_hat.T, X_hat ) / N"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    (4) Compute eigenvectors and eigenvalues of the covariance matrix. (Hint: numpy.linalg.eig.)\n",
    "    (5) Sort the eigenvectors in descending order with respect to their eigenvalues. The matrix containing the eigenvectors is \n",
    "$$W \\in R^{D×D}.$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_eigen(covar_matrix):\n",
    "    \"\"\"\n",
    "    Finds and sort the eigen vectors and values, in descending order with respect to the eigen values.\n",
    "    \"\"\"\n",
    "    eig_values, eig_vectors = np.linalg.eig(covar_matrix)\n",
    "    desc_order = np.argsort(eig_values)[::-1]  # Sorted in descending order\n",
    "    return eig_values[desc_order], eig_vectors.T[desc_order]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(6) Select the first $K ≤ D$ eigenvectors $W \\in R^{D×K}$ for projection in tasks (b),(c) and reconstruction in task (d). The Eq. (6.9) from the book is for one vector input x and output z:\n",
    "$$R^K \\ni z = W^T(x-m) \\in R^D$$\n",
    "\n",
    "    Extend to multiple points\n",
    "    \n",
    "$$Z^T = W^T\\hat{X}^T$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def select_K(C, K):\n",
    "    \"\"\"\n",
    "    This function creates and selects the first K eigen vectors\n",
    "    \"\"\"\n",
    "    eig_values, eig_vectors = get_eigen(C)\n",
    "    return eig_vectors[:K]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (b) \n",
    "Project the 2D original data X to \n",
    "\n",
    "$$Z \\in R^{252×K}, K = 2$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def PCA(X, K, return_params = False):\n",
    "    \"\"\"\n",
    "    This function creates an principal component analysis with the dimensionality of K\n",
    "    \"\"\"\n",
    "    assert K <= len(X[0])\n",
    "    \n",
    "    m = calc_m(X)\n",
    "    transformed_X = X_hat(X,m)\n",
    "    C = covar_matrix(transformed_X)\n",
    "    W_T = select_K(C, K)\n",
    "    Z_T = W_T.dot(transformed_X.T )\n",
    "    \n",
    "    if return_params:\n",
    "        return Z_T.T, [m, C, W_T]\n",
    "    return Z_T.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "K = 2\n",
    "X = df[[\"%Fat\",\"Abdom\"]].to_numpy()\n",
    "Z_252x2 = PCA( X, K )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_it(plot_list, title=\"Some scatter\", xlabel=\"Some X name\", ylabel=\"some Y name\"):\n",
    "    \"\"\"\n",
    "    Function to plot the result of the PCA\n",
    "    \"\"\"\n",
    "    \n",
    "    plt.figure(figsize=(12,8))\n",
    "    for points, name in plot_list: \n",
    "        if points.shape[1] == 1:\n",
    "            tmp = np.zeros( (points.shape[0], 2) )\n",
    "            tmp[:,:1] = points\n",
    "            points = tmp\n",
    "        plt.scatter(points[:,0], points[:,1],\n",
    "             label=name)\n",
    "    plt.title(title)\n",
    "    plt.xlabel(xlabel)\n",
    "    plt.ylabel(ylabel)\n",
    "    plt.legend()\n",
    "    plt.axhline(color = \"lightgrey\", linewidth = 1)\n",
    "    plt.axvline(color = \"lightgrey\", linewidth = 1)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_list = [(X, \"Original Data\")\n",
    "            ,(Z_252x2, \"2D projection\")]\n",
    "plot_it(plot_list, title = \"PCA Examples\", xlabel=\"% body fat\", ylabel=\"Abdom measure\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (c) \n",
    "Project the 2D original data X to 1D $Z \\in R^{252×K}, K = 1$.\n",
    "\n",
    "Hint: For plotting the 1D data in 2D space use $x= Z \\in R^{252×1}$ and $y=0 \\in R^{252×1}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "K = 1\n",
    "X = df[[\"%Fat\",\"Abdom\"]].to_numpy()\n",
    "Z_252x1, weights = PCA( X, K, True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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7Wnt2QDbzK41swYza2hubs7lEHNm8eLF+q//+i/Px5YvX65t27Zp7969mjJlimbNmqV333031H3Sbdl9ySWXqK6uLtR1U8P0008/Heo6AAAApa47Z6Y/KGm0pG1mtk/SSEm/N7NTFZuJPiPp3JGSXvW6iHPu+865audc9YgRI7o8qI1/3Ki5D85V1b1VmvvgXG3848YuX/PCCy/UsGHD0p5jZlqyZIlOPfVU/epXv+r0+KhRo3TzzTdr+vTpmj59ul588UVJsaB+0003adasWbr55pt14MAB1dTUqKqqSuedd562b98uSVq1apWuv/56SVJzc7MWLFigadOmadq0adq8ebMk6ciRI7r66qs1ceJEVVVVad26daqrq1Nra6smT57cvgPiSSedJCm2BXptba0mTJigiRMntm93/sQTT+ijH/2oLrvsMo0dO1ZXXnmlevJmQAAAAEF126Ytzrkdkt6f+DkeqKudc2+Y2UOSrjez+yXNkHTIOfdavse08Y8btfTppTrWdkyS9Nrbr2np00slSRd94KJ8316SNHXqVO3Zs0eXXnppp8cGDx6s3/3ud7rvvvt044036pFHHpEkPf/883rsscdUVlamL33pS5oyZYo2bNig+vp6XXXVVdq6dWuH69xwww1asmSJLrjgAr388suaN2+edu/erdtvv11DhgzRjh07JEkHDx7UggULtHLlyk7XkKT169dr69at2rZtm9544w1NmzZNF154oSSpsbFRu3bt0umnn66ZM2dq8+bNuuCCC3L9dgEAABSVvIVpM/uZpI9KGm5m+yXd6pz7oc/pv5T0SUkvSjoq6ep8jSvZXb+/qz1IJxxrO6a7fn9Xt4XpdDO4ixYtav+6ZMmS9uOXX365ysrKJElPPfWU1q1bJ0maPXu23nzzTR06dKjDdR577DE999xz7T8fPnxYb731lh577DHdf//97ceHDh2adqxPPfWUFi1apLKyMp1yyin6yEc+omeffVaDBw/W9OnTNXLkSEnS5MmTtW/fPsI0AAAoeXkL0865RRkeH5X0vZP0xXyNxc//vP0/WR3Ph8bGRs2ZM8fzMTPz/H7QoEHt33uF8eRzJenEiRP6zW9+o/Ly8g7HnXOdzk0nXfDv379/+/dlZWVp67kBAABKRa/eAfHUQadmdTyXnHO6++679dprr+njH+/UjluS2muS16xZo/PPP9/znAsvvFCrV6+WFKtdHj58uAYPHtzhnLlz52rlypXtPydKOFKPHzx4UJIUiUQUjUY977VmzRq1tbWpublZTz75pKZPnx70JQMAAJScXh2mb5h6gwaUDehwbEDZAN0w9YYuXXfRokU6//zztXfvXo0cOVI//OF71S21tbXtrfGeffZZbdq0Sf369fO8zjvvvKMZM2borrvu0ooVKzzPWbp0qRoaGlRVVaW6ujrde++97Y8lZp3vvvvu9nPOOecc3XPPPZKkr33tazp48KAmTJigSZMmadOmTZKka6+9VlVVVe0LEBM+/elPq6qqSpMmTdLs2bP1rW99S6eemv8PHgAAAMXKenLXherqatfQ0NDh2O7duzVu3LjA19j4x4266/d36X/e/h+dOuhU3TD1hm6rl05n1KhRamho0PDhw0M9/84779Thw4d122235Xhk4WX7uwHQs+zcubNTf30AKBVmtsU5V516vNu6eRSriz5wUVGE51y65557tGrVKq1fv77QQwEAAChpvbrMo5jt27cv9Kz0ddddpx07dmjMmDE5HhUAAACSEaYBAACAkEoyTPfkOvBSxe8EAACUopIL0wMGDNCbb75JeCsizjm9+eabGjBgQOaTAQAAepCSW4A4cuRI7d+/X83NzYUeCpIMGDCgfYdEAACAUlFyYToSiWj06NGFHgYAAAB6gZIr8wAAAAC6C2EaAAAACIkwDQAAAIREmAYAAABCIkwDAAAAIRGmAQAAgJAI0wAAAEBIhGkAAAAgJMI0AAAAEBJhGgAAAAiJMA0AAACERJgGAAAAQiJMAwAAACERpgEAAICQCNMAAABASIRpAAAAIKS+hR4AAABAb7KhsUnLH92rV1tadXpFuWrnna2aKZWFHhZCIkwDAAB0kw2NTbpl/Q61RtskSU0trbpl/Q5JIlD3UJR5AAAAdJPlj+5tD9IJrdE2LX90b4FGhK4iTAMAAHSTV1taszqO4keYBgAA6CanV5RndRzFjzANAADQTWrnna3ySFmHY+WRMtXOO7tAI0JXsQARAACgmyQWGdLNo3QQpgEAALpRzZRKwnMJocwDAAAACIkwDQAAAIREmQcAAACKWjHvGkmYBgAAQNEq9l0jKfMAAABA0Sr2XSMJ0wAAAChaxb5rJGEaAAAARavYd43MW5g2sx+Z2etmtjPp2HIz22Nm283s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\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_list = [(X, \"Original Data\")\n",
    "            ,(Z_252x2, \"2D projection\")\n",
    "            ,(Z_252x1, \"1D projection\")]\n",
    "plot_it(plot_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (d) \n",
    "Approximate the original data by $K = 1$.\n",
    "Hint: Remember to add the mean back and consider that the original data dimension must be reconstructed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "m = weights[0]\n",
    "W = weights[-1].T\n",
    "approx_original = np.ones((X.shape))\n",
    "approx_original = W.dot(Z_252x1.T).T + m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_list = [(X, \"Original Data\")\n",
    "            ,(Z_252x2, \"2D projection\")\n",
    "            ,(Z_252x1, \"1D projection\")\n",
    "            ,(approx_original, \"Aproximation from 1D\")]\n",
    "plot_it(plot_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (e) \n",
    "Plot the results for each step, i.e.: original data, projected data for K = 2, projected data for K = 1, and approximated original data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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39dff53k5OSYjzcrK4u8vDw++ugjJkyYwIgRIzh06FDYaxSoRURERE5r9oF6ZW4Bg+esptuM1xg8ZzUrcwtqdL/Vq1eTmJjIlClTAPB4PMybN4+//e1vnDhxgkWLFnHdddcxevRoRo0aRX5+vn83shMnTnD99deTnp7OhAkTGDhwoH8nyK5du/L555+Tn59Pz549uemmm+jVqxejRo2iuLgYgKeeeor+/fvTu3dvxo8fz4kTJyIa+4QJExg1ahQvvPACAA888AD9+/cnNTWVm2++GWsty5cvJycnh0mTJpGRkUFxcbHjeSIiIiLNRbMO1CtzC7j75a0UFBVjgYKiYu5+eWuNQvX27dvp27dvpWNt2rThvPPOY8+ePQBs2LCBZ555htWrV1c6749//CPt2rVjy5Yt3HfffWzatMnxGR999BG33HIL27dvJzk5mRUrVgAwbtw43n//fTZv3kzPnj3561//GvH4+/Tpw86dOwG49dZbef/999m2bRvFxcW8+uqrXHvttfTr14/FixeTl5dHUlKS43kiIiIizUWzDtRz39xFcUlZpWPFJWXMfXNX1Pe01jouaAs8/p3vfIezzjqryjnr1q3jhhtuACA1NZX09HTHZ3Tr1o2MjAwA+vbtS35+PgDbtm3jW9/6FmlpaSxevJjt27dHNX6fNWvWMHDgQNLS0li9enXI+7k9T0RERKQpataB+kBRcUTH3ejVq5e/TMPn2LFj7Nu3jwsvvBCA1q1bO17rtlSiZcuW/p89Hg+lpaUATJ48mQULFrB161ZmzpwZVdu33NxcevbsycmTJ/n5z3/O8uXL2bp1KzfddJPj/dyeJyIiItJUNetA3Tk5KaLjbowcOZITJ07w7LPPAlBWVsYvfvELJk+eTKtWrcJeO2TIEF588UUAPvzwQ7Zu3RrRs7/88ks6depESUkJixcvjnjsK1as4K233mLixIn+UNy+fXuOHz9eaeHkmWeeyZdffgkQ9jwRERGR5qBZB+rpV1xMUoKn0rGkBA/Tr7g46nsaY3jllVd46aWX6N69OxdddBGJiYk89NBD1V7785//nEOHDpGens5vf/tb0tPTadu2retnP/jggwwcOJDvfOc79OjRw9U18+bN87fNe/7551m9ejUdOnQgOTmZm266ibS0NMaOHUv//v3910yePJmpU6eSkZFBy5YtQ54nIiIi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e/To0YP8/Hz27NkDwHPPPcfll18OwLx58+jZsydLlizhxz/+MSUlJVGN8+jRo6SkpADeOmWfM888ky+//NLxmssuu8xfE7548WLHsUdr6NChLF68GIDdu3ezd+9eLr744pjd30l+fj7/8z//w2233VarzxEREZGmrVkH6trYhWfJkiVcc801lY6NHz+eF154AYBBgwYxY8YMUlNT6datW5VzwTtb/fTTT3Pdddf5SzemTp3K7t27+ctf/sJjjz3Gt771LYYOHcqvf/3rqMb5y1/+krvvvpvBgwdTVlbmPz58+HA+/PBD/6LEQE888QRPP/006enpPPfcczz++ONRPdvJz3/+c8rKykhLS2PChAksWrSo0sx0JN5//326dOnCSy+9xE9/+lN69erlf+3jjz/2t827/vrrue2229ThQ0RERGrENOYa0n79+tmcnJxKx3bs2BHRv8I/mp1dZ7vwrF27lkcffZRXX321Vu4vsRXp3yWRpmTbtm2kpqbW9zBERBoMY8wma20/p9eadQ01NK5deERERESk4Wn2gbouDRs2LKrFfyIiIiLScDXrGmoRERERkZpqkoG6MdeFS8Ogv0MiIiLiVpML1ImJiXzxxRcKRBI1ay1ffPEFiUEdYEREREScNLka6i5durB//34OHTpU30ORRiwxMdFx0xwRERGRYE0uUCckJNCtW7f6HoaIiIiINBNNruRDRERERKQuNbkZahEREZFYWZlbwNw3d3GgqJjOyUlMv+Jixmam1PewpIFRoBYRERFxsDK3gLtf3kpxSRkABUXF3P3yVgCFaqlEJR8iIiIiDua+ucsfpn2KS8qY++auehpRdI5mZ/PRiJHs6HkJH40YydHs7PoeUpOjGWoRERERBweKiiM63hAdzc6m8L77sSdPAlB64ACF990PQNvRo+tzaE2KZqhFREREHHROToroeEN0cN58f5j2sSdPcnDe/HoaUdOkQC0iIiLiYPoVF5OU4Kl0LCnBw/QrLq6nEUWutLAwouMSHQVqEREREQdjM1N4eFwaKclJGCAlOYmHx6U1qgWJ8Z06RXRcoqMaahEREZEQxmamNKoAHaxj1rRKNdQAJjGRjlnT6nFUTY8CtYiIiEgT5Vt4eHDefEoLC4nv1ImOWdO0IDHGFKhFREREmrC2o0crQNcyBWoRERERqZHmvqOkFiWKiIiINHAN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\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_list = [(X, \"Original Data\")\n",
    "            ,(Z_252x2, \"2D projection\")\n",
    "            ,(Z_252x1, \"1D projection\")\n",
    "            ,(approx_original, \"Aproximation from 1D\")]\n",
    "plot_it(plot_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'South'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opposites = {\n",
    "    \"North\" : \"South\",\n",
    "    \"South\": \"North\",\n",
    "    \"West\": \"East\",\n",
    "    \"East\": \"West\",\n",
    "}\n",
    "opposites[\"North\"]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
