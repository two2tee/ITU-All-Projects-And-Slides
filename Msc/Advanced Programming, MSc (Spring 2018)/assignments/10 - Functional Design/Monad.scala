// Advanced Programming 2015
// Andrzej Wasowski, IT University of Copenhagen
package fpinscala.monads
import scala.language.higherKinds

// Generalization of the map function 
// Map is parameterized on the higher kinded type constructor F[_]
// Functor trait is parametric in choice of F (e.g. data type like List, Gen, Parser, or Option)
trait Functor[F[_]] {

  def map[A,B] (fa: F[A]) (f: A => B) :F[B]

  def distribute[A,B] (fab: F[(A,B)]): (F[A],F[B]) = // Unzip split
    (map (fab) (_._1), map (fab)(_._2))

  def codistribute[A,B] (e :Either[F[A],F[B]]): F[Either[A,B]] = e match { // Produce either or 
    case Left(fa) => map (fa) (Left(_))
    case Right(fb) => map (fb) (Right(_))
  }

}

// Companion object with helper functions 
object Functor {

  val listFunctor = new Functor[List] {
    def map[A,B] (as: List[A]) (f: A => B): List[B] = as.map (f)
  }

  // Exercise 10

  val optionFunctor = new Functor[Option] {
    def map[A,B] (as: Option[A]) (f: A =>B): Option[B] = as.map (f) 
  }

}

// Monad used to abstract concrete monad data types such as Parser, Gen, Par, Option, List. 
// The Monad trait consists of a flatMap and unit operation by default. 
// The Monad is governed by the associative and identity law. 
// As such, a Monad may be perceived as an interface parameterized by a type with two primitives and two laws.
trait Monad[F[_]] {

  def unit[A]  (a: => A): F[A]
  def flatMap[A,B] (ma: F[A]) (f: A => F[B]) :F[B]

  def map[A,B] (ma: F[A]) (f: A => B) :F[B] =
    flatMap (ma) (a => unit (f(a)))

  def map2[A, B, C] (ma: F[A], mb: F[B]) (f: (A,B) => C): F[C] =
    flatMap (ma) (a => map (mb) (b => f(a,b)))

  // Exercise 13 (CB11.3)

  // Sequence takes a list of monads and marges them into one, which generates a list 
  // Monad is analogous to a generator of values 
  // Each entry in the output list has been generated by one of the input monads 
  def sequence[A] (lfa: List[F[A]]): F[List[A]] = 
    // Fold lift of monads, accumulate in empty F[List], and unwrap elements from both using map2 
    lfa.foldRight (unit(List[A]())) ((monad, acc) => map2 (monad, acc) (_ :: _))

  // traverse seems to simply sequence results of mapping.  I do not think that
  // it appeared in our part. You can uncomment it once you have sequence.
  def traverse[A,B] (la: List[A]) (f: A => F[B]): F[List[B]] = sequence(la.map (f))

  // Exercise 14 (CB11.4)

  // Replicate monad instance n times into an instance of a list monad
  // In other words, create a monad n times to get a monad of lists of that length
  // Example: replicateN (3, ma) => F[List[A]] : F[List[ma, ma, ma]]
  def replicateM[A] (n: Int, ma: F[A]): F[List[A]] = 
    map[A, List[A]] (ma) (elem => List.fill (n) (elem))


  def join[A] (mma: F[F[A]]): F[A] = flatMap (mma) (ma => ma)

  // Exercise 15 is solved in MonadSpec.scala

  // Exercise 16 (CB11.7)

  // Associative law for monads: op(op(x,y), z) == op(x, op(y,z))
  // Kleisli arrows make this law clearer and can be composed
  // Kleisli function enables composition of functions that return a monadic value,
  // Example: Option[Int] or Either[String,List[Double]] can be composed without having functions take Option or Either
  // It uses monadic functions of types like A => F[B] instead of monadic values of type F[A]
  def compose[A,B,C] (f: A => F[B], g: B => F[C]): A => F[C] = 
    a => flatMap (f(a)) (g) // flatMap (A => F[B]) (B => F[C]) flattened to F[C] 
    // TODO: Why is flatMap not a member of type parameter F[B] in "a => f(a).flatMap(g)" ?

  // Example use 
  def flatMapCompose[A,B] (ma: F[A]) (f: A => F[B]) :F[B] = 
    compose((_:Unit) => ma, f)(())

  // Inspiration: https://blog.ssanj.net/posts/2017-06-07-composing-monadic-functions-with-kleisli-arrows.html
  // final case class Kleisli[F[_], A, B](run: A => F[B])
  // def compose(g: A => F[B], f: B => F[C]) (implicit M: Monad[F[_]]): A => F[C]
}

object Monad {

  // Exercise 12 (CB11.1)

  val optionMonad = new Monad[Option] {
    def unit[A] (a: => A): Option[A] = Option(a) 
    def flatMap[A,B] (ma: Option[A]) (f: A => Option[B]) :Option[B] = ma.flatMap (f) 
  }

  val listMonad = new Monad[List] {
    def unit[A] (a: => A): List[A] = List(a) 
    def flatMap[A,B] (ma: List[A]) (f: A => List[B]): List[B] = ma.flatMap (f) 
  }

}
